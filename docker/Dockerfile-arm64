FROM nvidia/cuda:11.7.1-cudnn8-devel-ubuntu22.04

ARG SOURCE=/tmp/ochem-external-tools/

# indicate on how many CPUs it should be compiled
ARG JNN=j6
ARG PYTHON=3.9

ENV DEBIAN_FRONTEND=noninteractive

RUN apt-get -qq update --fix-missing && apt-get update && \
# first install tomcat for external use
   apt-get -y --no-install-recommends  install apt-utils openjdk-8-jdk vim tar wget locate zip unzip iputils-ping python$PYTHON python3-pip git authbind wait-for-it && \
   apt-get -y install software-properties-common screen libgomp1 && apt-get -y install cmake libopenblas-base libomp-dev && apt-get -y install ca-certificates libglib2.0-0 libxext6 libsm6 libxrender1

ARG HOME=/etc/ochem

#Installing external tools from OpenOchem source repositories
RUN cd /tmp ; git clone https://github.com/openochem/ochem-external-tools.git && \
# copy to correct place
    mkdir $HOME  && cd $HOME && cp -r $SOURCE/ochem/ . && mkdir -p /etc/cs_servers && mkdir -p /etc/source && cp -r $SOURCE/* /etc/source && \
# WEKA
    cd && mkdir -p /etc/source/weka && wget https://sourceforge.net/projects/weka/files/weka-3-6/3.6.15/weka-3-6-15.zip/download && unzip download && cp weka-3-6-15/weka.jar /etc/source/weka && cd && rm -rf download weka-3-6-15 && \
# GSFRAG
    cd /etc/source/gsfrag/source && bash make.sh && mv gsfrag ../gsfrag-aarch64 && mv gsfragl ../gsfragl-aarch64 && \
# OpenBabel 2.4.1 required for specrophores
    cd && wget https://github.com/openbabel/openbabel/archive/refs/tags/openbabel-2-4-1.tar.gz && tar -zxf openbabel-2-4-1.tar.gz && rm openbabel-2-4-1.tar.gz && cd openbabel-openbabel-2-4-1 && sed -i 's|-119|137|' src/formats/pngformat.cpp && sed -i 's|-16|240|'  src/formats/yasaraformat.cpp && mkdir build && cd build/ && cmake .. && make -$JNN && make install && cd && rm -rf openbabel* && \
# silicos-it
    cd && mkdir -p /etc/source/silicos-it && git clone https://github.com/silicos-it/strip-it.git && cd strip-it && cmake CMakeLists.txt && make && cp strip-it  /etc/source/silicos-it/strip-it-aarch64 && cd && rm -rf strip-it && \
#R latest version
    apt update && apt install -y r-base && /usr/bin//Rscript -e 'install.packages("pls",repos="http://cran.us.r-project.org")' && /usr/bin//Rscript -e 'install.packages("randomForest",repos="http://cran.us.r-project.org")'

#Tomcats
ARG apacheversion="9.0.71"
ARG TOM=9
ARG apachetomcat="apache-tomcat-"$apacheversion
ARG package="$HOME/ochem"
ARG conf_dir="$package/conf"
RUN cd && wget http://archive.apache.org/dist/tomcat/tomcat-$TOM/v$apacheversion/bin/$apachetomcat.zip && unzip $apachetomcat.zip && cp -r $apachetomcat "$HOME/ochem-tomcat" && rm -rf "$HOME/ochem-tomcat/webapps/ROOT" && mv $apachetomcat "$HOME/metaserver-tomcat" && rm -rf $apachetomcat.zip && ln -sf $conf_dir/tomcat/ochem-server.xml $HOME/ochem-tomcat/conf/server.xml && ln -sf $conf_dir/tomcat/metaserver-server.xml $HOME/metaserver-tomcat/conf/server.xml &&  mkdir /etc/ochem/cs_release && cd $HOME ; zip -9 -r /home/ochem.zip *

#START Conda base
ENV PATH="${PATH}:/opt/conda/bin"
RUN wget --quiet https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-aarch64.sh -O /root/anaconda.sh && /bin/bash /root/anaconda.sh -b -p /opt/conda && rm /root/anaconda.sh && ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh && \
    . /opt/conda/etc/profile.d/conda.sh && conda activate base && conda install python=$PYTHON && conda update -y -n base -c defaults conda && conda clean -y --all 

ENV CUDA_HOME=/usr/local/cuda/
ENV PATH=/usr/local/cuda/bin:$PATH
ENV LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH

RUN eval "$(command conda 'shell.bash' 'hook' 2> /dev/null)" && conda activate base && pip install rdkit

# NVIDIA settings
ARG VERSION=11
ARG CUDA=3
ARG CUPY=cupy-cuda$VERSION$CUDA
ARG PYTORCHMAIN=1.13 # last supported version for this nvidia library 
ARG PYTORCHMIN=1
ARG TENSOR=2.11.0
ARG KGCN=2.0.4

ARG CUDAPATH=${VERSION}.${CUDA}
# For pytorch
ARG CUDTORCH=cu${VERSION}${CUDA}
ARG PYTORCH=${PYTORCHMAIN}.${PYTORCHMIN}

ENV CUDA_HOME=/usr/local/cuda/
ENV PATH=/opt/conda/bin/:/usr/local/cuda/bin:$PATH
ENV LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH

RUN eval "$(command conda 'shell.bash' 'hook' 2> /dev/null)" && conda activate base && pip install --no-cache-dir git+https://github.com/bp-kelley/descriptastorus && pip install --no-cache-dir texttable && \
   conda install -y pytorch torchvision  && pip install torch-geometric && \
# scikit-learn
   conda install -y scikit-learn && pip install lightgbm molvs && \
   conda install -c conda-forge openbabel && \ 
# usually latest version; just to  use checked one 
   pip install --no-cache-dir --upgrade tensorflow-aarch64==$TENSOR protobuf && \
   pip install --no-cache-dir h5py Pebble matplotlib keras tensorboardX pyyaml xlrd  mysql.connector opencv-python tensorflow-probability tables fire deepchem  sympy && \
# && pip install --no-cache-dir 'git+https://github.com/facebookresearch/detectron2.git' && conda install -c conda-forge -c schrodinger pymol-bundle &&
   conda install -y -c conda-forge pygpu && pip install --no-cache-dir mhfp && \ 
   pip install --no-cache-dir git+https://github.com/mordred-descriptor/mordred chainer line_profiler pudb gpflow && conda clean -y --all 

RUN eval "$(command conda 'shell.bash' 'hook' 2> /dev/null)" && conda activate base && pip install --no-cache-dir h5py==3.6.0
RUN eval "$(command conda 'shell.bash' 'hook' 2> /dev/null)" && conda activate base && pip install --no-cache-dir h5py==3.7.0

# update library 
RUN apt-get install -y libstdc++6 && add-apt-repository ppa:ubuntu-toolchain-r/test && apt-get update && apt-get -y upgrade && apt-get -y dist-upgrade

#making executable
RUN chmod +x /etc/source/*/* && chmod +x /etc/source/*/*/* && chmod 777 -R /etc/source && chmod 777 -R /etc/cs_servers && chmod 777 /var/run/screen && chmod +x /opt/conda/etc/profile.d/conda.sh && mkdir /ochem && updatedb && rm -rf $HOME/*

# maven for building source
ARG MAVEN_VERSION=3.8.7
ARG BASE_URL=https://apache.osuosl.org/maven/maven-3/${MAVEN_VERSION}/binaries

RUN mkdir -p /usr/share/maven /usr/share/maven/ref \
 && wget -O /tmp/apache-maven.tar.gz ${BASE_URL}/apache-maven-${MAVEN_VERSION}-bin.tar.gz \
 && tar -xzf /tmp/apache-maven.tar.gz -C /usr/share/maven --strip-components=1 \
 && rm -f /tmp/apache-maven.tar.gz \
 && ln -s /usr/share/maven/bin/mvn /usr/bin/mvn

ENV MAVEN_HOME /usr/share/maven
ENV MAVEN_CONFIG "/usr/share/maven/.m2"

ENV PATH=/opt/conda/bin/:/usr/local/cuda/bin:$PATH
ENV LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH
ENV SCREENDIR=/tmp/.screen
ENV OMP_NUM_THREADS=1
ENV CUDA_DEVICE_ORDER=PCI_BUS_ID
